/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  6
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/

surfaceProfiles
{
    type surfaces;
    lib ("libsampling.so");
    writeControl adjustableRunTime;
    writeInterval 0.05;
    surfaceFormat raw;
    fields (U);

    interpolationScheme cellPoint;

    surfaces
    (
        xNormal_x1.06
        {
            type cuttingPlane;
            planeType pointAndNormal;
            pointAndNormalDict
            {
                point (1.06 0.0 0.0);
                normal (1 0 0);
            }
            interpolate true;
        }
        xNormal_x1.54
        {
            type cuttingPlane;
            planeType pointAndNormal;
            pointAndNormalDict
            {
                point (1.54 0.0 0.0);
                normal (1 0 0);
            }
            interpolate true;
        }
        xNormal_x2.02
        {
            type cuttingPlane;
            planeType pointAndNormal;
            pointAndNormalDict
            {
                point (2.02 0.0 0.0);
                normal (1 0 0);
            }
            interpolate true;
        }
        xNormal_x4.00
        {
            type cuttingPlane;
            planeType pointAndNormal;
            pointAndNormalDict
            {
                point (4.0 0.0 0.0);
                normal (1 0 0);
            }
            interpolate true;
        }
        xNormal_x7.00
        {
            type cuttingPlane;
            planeType pointAndNormal;
            pointAndNormalDict
            {
                point (7.0 0.0 0.0);
                normal (1 0 0);
            }
            interpolate true;
        }
        xNormal_x10.00
        {
            type cuttingPlane;
            planeType pointAndNormal;
            pointAndNormalDict
            {
                point (10.0 0.0 0.0);
                normal (1 0 0);
            }
            interpolate true;
        }
        yNormal_x0.0
        {
            type cuttingPlane;
            planeType pointAndNormal;
            pointAndNormalDict
            {
                point (0.0 0.0 0.0);
                normal (0 1 0);
            }
            interpolate true;
        }
    );
}

// ************************************************************************* //
